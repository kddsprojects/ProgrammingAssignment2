##'makeCacheMatrix' and 'cacheSolve' are functions that in tandem,
## return the inverse of a matrix; either by retrival of the cached inverse
## already calculated previously, or if no such cached inverse exists,
## by calling an explicit calculation of the inverse.


## Creates the necessary object type that is required for a cacheSolve
## function argument
##'inv' denotes a placeholder for the inverse of the matrix x
makeCacheMatrix <- function(x = numeric()) {
        inv<-NULL
        set<-function(y){
                x<<-y
                inv<<-NULL
                ##extra bonus thrown in here
        }
        get<-function() x   
        setinverse<-function(inverse) inv<<-inverse
        getinverse<-function() inv
        list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}


## Computes or retrieves the inverse of the "matrix" in the list object 
## returned by makeCacheMatrix.

cacheSolve <- function(x, ...) {
        inv<-x$getinverse()
        if(!is.null(inv)){
                message("getting cached data")
                return(inv)
        }
        data<-x$get()
        inv<-solve(data,...)
        x$setinverse(inv)
        inv
        ## Returns a matrix that is the inverse of 'x'
}